use clap::Parser;
use futures::{future, prelude::*};
use service::{
    models::{NewTask, Task},
    store::{self, Store},
    World,
};
use std::{
    net::{IpAddr, Ipv4Addr, SocketAddr},
    sync::Arc,
};
use tarpc::{
    context,
    server::{self, incoming::Incoming, Channel},
    tokio_serde::formats::Json,
};

#[derive(Parser)]
struct Flags {
    /// Sets the port number to listen on.
    #[clap(long)]
    port: u16,
}

// This is the type that implements the generated World trait. It is the business logic
// and is used to start the server.
#[derive(Clone)]
struct HelloServer {
    income_addr: SocketAddr,
    store: Store,
}

#[tarpc::server]
impl World for HelloServer {
    async fn new_task(self, _: context::Context, new: NewTask) -> Task {
        println!("inpmu addr {}", self.income_addr);
        self.store.new_task(new)
    }
}

#[tokio::main]
async fn main() -> anyhow::Result<()> {
    let flags = Flags::parse();
    let server_addr = (IpAddr::V4(Ipv4Addr::UNSPECIFIED), flags.port);
    let db = Arc::new(store::connect());

    // JSON transport is provided by the json_transport tarpc module. It makes it easy
    // to start up a serde-powered json serialization strategy over TCP.
    let mut listener = tarpc::serde_transport::tcp::listen(&server_addr, Json::default).await?;
    listener.config_mut().max_frame_length(usize::MAX);
    listener
        // Ignore accept errors.
        .filter_map(|r| future::ready(r.ok()))
        .map(server::BaseChannel::with_defaults)
        // Limit channels to 1 per IP.
        .max_channels_per_key(1, |t| t.transport().peer_addr().unwrap().ip())
        // serve is generated by the service attribute. It takes as input any type implementing
        // the generated World trait.
        .map(|channel| {
            let server = HelloServer {
                income_addr: channel.transport().peer_addr().unwrap(),
                store: Store { db: db.clone() },
            };
            channel.execute(server.serve())
        })
        // Max 10 channels.
        .buffer_unordered(10)
        .for_each(|_| async {})
        .await;

    Ok(())
}
